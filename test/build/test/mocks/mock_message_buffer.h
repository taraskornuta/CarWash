/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_MESSAGE_BUFFER_H
#define _MOCK_MESSAGE_BUFFER_H

#include "unity.h"
#include "message_buffer.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_message_buffer_Init(void);
void mock_message_buffer_Destroy(void);
void mock_message_buffer_Verify(void);




#define xStreamBufferGenericCreate_IgnoreAndReturn(cmock_retval) xStreamBufferGenericCreate_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xStreamBufferGenericCreate_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, StreamBufferHandle_t cmock_to_return);
#define xStreamBufferGenericCreate_ExpectAndReturn(xBufferSizeBytes, xTriggerLevelBytes, xIsMessageBuffer, cmock_retval) xStreamBufferGenericCreate_CMockExpectAndReturn(__LINE__, xBufferSizeBytes, xTriggerLevelBytes, xIsMessageBuffer, cmock_retval)
void xStreamBufferGenericCreate_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer, StreamBufferHandle_t cmock_to_return);
typedef StreamBufferHandle_t (* CMOCK_xStreamBufferGenericCreate_CALLBACK)(size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer, int cmock_num_calls);
void xStreamBufferGenericCreate_AddCallback(CMOCK_xStreamBufferGenericCreate_CALLBACK Callback);
void xStreamBufferGenericCreate_Stub(CMOCK_xStreamBufferGenericCreate_CALLBACK Callback);
#define xStreamBufferGenericCreate_StubWithCallback xStreamBufferGenericCreate_Stub
#define xStreamBufferReceive_IgnoreAndReturn(cmock_retval) xStreamBufferReceive_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xStreamBufferReceive_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, size_t cmock_to_return);
#define xStreamBufferReceive_ExpectAndReturn(xStreamBuffer, pvRxData, xBufferLengthBytes, xTicksToWait, cmock_retval) xStreamBufferReceive_CMockExpectAndReturn(__LINE__, xStreamBuffer, pvRxData, xBufferLengthBytes, xTicksToWait, cmock_retval)
void xStreamBufferReceive_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, StreamBufferHandle_t xStreamBuffer, void* pvRxData, size_t xBufferLengthBytes, TickType_t xTicksToWait, size_t cmock_to_return);
typedef size_t (* CMOCK_xStreamBufferReceive_CALLBACK)(StreamBufferHandle_t xStreamBuffer, void* pvRxData, size_t xBufferLengthBytes, TickType_t xTicksToWait, int cmock_num_calls);
void xStreamBufferReceive_AddCallback(CMOCK_xStreamBufferReceive_CALLBACK Callback);
void xStreamBufferReceive_Stub(CMOCK_xStreamBufferReceive_CALLBACK Callback);
#define xStreamBufferReceive_StubWithCallback xStreamBufferReceive_Stub
#define xStreamBufferSend_IgnoreAndReturn(cmock_retval) xStreamBufferSend_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xStreamBufferSend_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, size_t cmock_to_return);
#define xStreamBufferSend_ExpectAndReturn(xStreamBuffer, pvTxData, xDataLengthBytes, xTicksToWait, cmock_retval) xStreamBufferSend_CMockExpectAndReturn(__LINE__, xStreamBuffer, pvTxData, xDataLengthBytes, xTicksToWait, cmock_retval)
void xStreamBufferSend_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, StreamBufferHandle_t xStreamBuffer, const void* pvTxData, size_t xDataLengthBytes, TickType_t xTicksToWait, size_t cmock_to_return);
typedef size_t (* CMOCK_xStreamBufferSend_CALLBACK)(StreamBufferHandle_t xStreamBuffer, const void* pvTxData, size_t xDataLengthBytes, TickType_t xTicksToWait, int cmock_num_calls);
void xStreamBufferSend_AddCallback(CMOCK_xStreamBufferSend_CALLBACK Callback);
void xStreamBufferSend_Stub(CMOCK_xStreamBufferSend_CALLBACK Callback);
#define xStreamBufferSend_StubWithCallback xStreamBufferSend_Stub

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
